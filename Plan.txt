
- As we parse through the flipside data we will likely want 
  to just add things as we go to a instance variable so by the 
  end it has all of the data in it to be injected into the tweets

Order of things: 

- NEED to create a table that holds only proposals in annoucements, and proposals that are halfway done. 
  - Then we will grab proposals one at a time and feed them through the flipside stuff.
  - Maybe the way to do it is after we tweet an announcement we add that proposal to a table. 
  Then we can just check proposals in that table that are halfway over and execute there second half. 



- Fix Graph Genertor class (logo placement), FOR SCATTER ATM


















--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------

TEST INPUTS: 
--------------------------------------------------------------------------------------------------

{'block_timestamp' : 'TIMESTAMP', 'net_holders' : 'int', 'price' : 'numeric'}

{
    'proposal_id': 'text',
    'proposal_title': 'text',
    'proposal_text': 'text',
    'choices': 'text',
    'created_at': 'TIMESTAMP',
    'proposal_start_time': 'TIMESTAMP',
    'proposal_end_time': 'TIMESTAMP',
    'network': 'text',
    'space_id': 'text',
    'date_added': 'TIMESTAMP'
}
--------------------------------------------------------------------------------------------------

with tab1 as (
  SELECT 
    tx_id,
    mint_amount / power(10, 9) as amt
  from solana.defi.fact_token_mint_actions
  where mint LIKE 'CRTx1JouZhzSU6XytsE42UQraoGqiHgxabocVfARTy2s'
  and block_timestamp > '2024-05-01'
)

, Carrot_Price as ( 
SELECT 
  date(block_timestamp) as day,
  median(amount/amt) as median_price

FROM solana.core.fact_transfers as a
  left outer join tab1
    on a.tx_id = tab1.tx_id  
where tx_to like 'FfCRL34rkJiMiX5emNDrYp3MdWH2mES3FvDQyFppqgpJ'
and mint like 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'
and block_timestamp > '2024-05-01'
GROUP BY 1 
having not median_price = 0
order by 1 
) 

, Carrot_Holders as (
SELECT
  date(block_timestamp) as day,
  sum(
    case when bal = 0 then -1 
    when  change = bal then 1 
    else 0 end
  ) as net_holders

FROM (
SELECT
  block_timestamp,
  owner,
  balance - pre_balance as change,
  sum(balance - pre_balance) over (partition by owner ORDER by block_id) as bal

FROM solana.core.fact_token_balances
WHERE mint = 'CRTx1JouZhzSU6XytsE42UQraoGqiHgxabocVfARTy2s'
  AND succeeded = TRUE
  AND block_timestamp::date >= '2024-08-01'
)
group by 1 
ORDER BY 1 
) 

select
Carrot_Price.day as block_timestamp, 
net_holders,
median_price as price
from Carrot_Price left outer join Carrot_Holders on 
Carrot_Price.day = Carrot_Holders.day
END

--------------------------------------------------------------------------------------------------

with tab1 as (
  SELECT 
    tx_id,
    mint_amount / power(10, 9) as amt
  from solana.defi.fact_token_mint_actions
  where mint LIKE 'CRTx1JouZhzSU6XytsE42UQraoGqiHgxabocVfARTy2s'
  and block_timestamp > '2024-05-01'
)

, Carrot_Price as ( 
SELECT 
  date(block_timestamp) as day,
  median(amount/amt) as median_price

FROM solana.core.fact_transfers as a
  left outer join tab1
    on a.tx_id = tab1.tx_id  
where tx_to like 'FfCRL34rkJiMiX5emNDrYp3MdWH2mES3FvDQyFppqgpJ'
and mint like 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'
and block_timestamp > '2024-05-01'
and block_timestamp > current_date - 2 
GROUP BY 1 
having not median_price = 0
order by 1 
) 

, Carrot_Holders as (
SELECT
  date(block_timestamp) as day,
  sum(
    case when bal = 0 then -1 
    when  change = bal then 1 
    else 0 end
  ) as net_holders

FROM (
SELECT
  block_timestamp,
  owner,
  balance - pre_balance as change,
  sum(balance - pre_balance) over (partition by owner ORDER by block_id) as bal

FROM solana.core.fact_token_balances
WHERE mint = 'CRTx1JouZhzSU6XytsE42UQraoGqiHgxabocVfARTy2s'
  AND succeeded = TRUE
  AND block_timestamp::date >= '2024-08-01'
)
Where block_timestamp > current_date - 2 
group by 1 
ORDER BY 1 
) 

select
Carrot_Price.day as block_timestamp, 
net_holders,
median_price as price
from Carrot_Price left outer join Carrot_Holders on 
Carrot_Price.day = Carrot_Holders.day
END

--------------------------------------------------------------------------------------------------

